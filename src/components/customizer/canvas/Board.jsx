/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 boardglb.glb 
*/

import React, { useRef, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { proxy, useSnapshot } from 'valtio'

const state = proxy({
  current:null,
  items: {
    GEO_BACK_TOP_LID:"#ffffff",
    GEO_FRONT_FLAP:"#ffffff",
    GEO_BACK_TOP_LID_02:"#ffffff",
    GEO_FRONT_FLAP_02:"#ffffff",
    GEO_LEFT_UPPER:"#ff0000",
    GEO_MAIN:"#ffffff",
    GEO_RIGHT_UPPER:"#ffffff",
  }
})
export function Board(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/boardglb.glb')
  const { actions } = useAnimations(animations, group)
  const snap = useSnapshot(state)
  const [hovered, sethover] = useState(null)

  const flattenModel = () => {
   
    nodes.GEO_BACK_TOP_LID.position.set(0, 0, 0); // Set the position to (0, 0, 0) to flatten
    nodes.GEO_BACK_TOP_LID.rotation.set(0, 0, 0); // Set the rotation to (0, 0, 0) to flatten

    // Repeat this for other parts of the model

    // Update animations or any other adjustments you may need
  };

  /**
    onPointerDown={(e) => {
      e.stopPropagation()
      state.current = e.object.material.name
    }}
    onPointerMissed={(e) => {
      state.current = null
      
    }}
   */

  console.log(hovered)
  return (
    <group ref={group} {...props} dispose={null}
    onPointerOver={(e) => {
      e.stopPropagation()
      sethover(e.object.name)
    }}
    onPointerOut={(e) => {
      e.intersections.length === 0 && sethover(null)
      sethover(e.object.name)
    }}
    onPointerDown={(e) => {
      e.stopPropagation()
      state.current = e.object.name
    }}
    onPointerMissed={(e) => {
      state.current = null
      
    }}
    >
      <group>
        <group name="RootNode">
          <group name="GEO_BACK_TOP_LID_$AssimpFbx$_Translation" position={[0, 10.425, -4.75]}>
            <group name="GEO_BACK_TOP_LID_$AssimpFbx$_PreRotation" rotation={[-Math.PI / 2, 0, 0]}>
              <group name="GEO_BACK_TOP_LID_$AssimpFbx$_Rotation" rotation={[-0.262, 0, 0]}>
                <group name="GEO_BACK_TOP_LID_$AssimpFbx$_Scaling">
                  <mesh material-color={snap.items.GEO_BACK_TOP_LID} name="GEO_BACK_TOP_LID" geometry={nodes.GEO_BACK_TOP_LID.geometry} material={materials['Material #3']}>
                    <mesh material-color={snap.items.GEO_BACK_TOP_LID_02} name="GEO_BACK_TOP_LID_02" geometry={nodes.GEO_BACK_TOP_LID_02.geometry} material={materials['Material #3']} position={[0, 0, 9.5]} rotation={[1.554, 0, 0]} />
                  </mesh>
                </group>
              </group>
            </group>
          </group>
          <group name="GEO_FRONT_FLAP_$AssimpFbx$_Translation" position={[-3.281, 10.473, 4.653]}>
            <group name="GEO_FRONT_FLAP_$AssimpFbx$_PreRotation" rotation={[-Math.PI / 2, 0, 0]}>
              <group name="GEO_FRONT_FLAP_$AssimpFbx$_Rotation" rotation={[1.309, 0, 0]}>
                <group name="GEO_FRONT_FLAP_$AssimpFbx$_Scaling">
                  <group name="GEO_FRONT_FLAP_$AssimpFbx$_GeometricTranslation" position={[3.281, -0.05, 0]}>
                    <mesh material-color={snap.items.GEO_FRONT_FLAP} name="GEO_FRONT_FLAP" geometry={nodes.GEO_FRONT_FLAP.geometry} material={materials['Material #3']}>
                      <group name="GEO_FRONT_FLAP_$AssimpFbx$_GeometricTranslationInverse" position={[-3.281, 0.05, 0]}>
                        <mesh material-color={snap.items.GEO_FRONT_FLAP_02} name="GEO_FRONT_FLAP_02" geometry={nodes.GEO_FRONT_FLAP_02.geometry} material={materials['Material #3']} position={[3.281, -0.05, 2.096]} rotation={[-1.667, 0, 0]} />
                      </group>
                    </mesh>
                  </group>
                </group>
              </group>
            </group>
          </group>
          <group name="GEO_LEFT_UPPER_$AssimpFbx$_Translation" position={[-15, 10.425, -0.119]}>
            <group name="GEO_LEFT_UPPER_$AssimpFbx$_PreRotation" rotation={[-Math.PI / 2, 0, 0]}>
              <group name="GEO_LEFT_UPPER_$AssimpFbx$_Rotation" rotation={[0, -0.242, 0]}>
                <group name="GEO_LEFT_UPPER_$AssimpFbx$_Scaling">
                  <mesh material-color={snap.items.GEO_LEFT_UPPER} name="GEO_LEFT_UPPER" geometry={nodes.GEO_LEFT_UPPER.geometry} material={materials['Material #3']} />
                </group>
              </group>
            </group>
          </group>
          <group name="GEO_MAIN_$AssimpFbx$_Translation" position={[0, 5.175, 0]}>
            <group name="GEO_MAIN_$AssimpFbx$_PreRotation" rotation={[-Math.PI / 2, 0, 0]}>
              <mesh material-color={snap.items.GEO_MAIN} name="GEO_MAIN" geometry={nodes.GEO_MAIN.geometry} material={materials['Material #3']} />
            </group>
          </group>
          <group name="GEO_RIGHT_UPPER_$AssimpFbx$_Translation" position={[15, 10.425, -0.122]}>
            <group name="GEO_RIGHT_UPPER_$AssimpFbx$_PreRotation" rotation={[-Math.PI / 2, 0, 0]}>
              <group name="GEO_RIGHT_UPPER_$AssimpFbx$_Rotation" rotation={[0, 0.364, 0]}>
                <mesh material-color={snap.items.GEO_RIGHT_UPPER} name="GEO_RIGHT_UPPER" geometry={nodes.GEO_RIGHT_UPPER.geometry} material={materials['Material #3']} />
              </group>
            </group>
          </group>
        </group>
      </group>
    
    </group>
  )
}

useGLTF.preload('/boardglb.glb')
